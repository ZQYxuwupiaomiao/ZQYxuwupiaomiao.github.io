[{"title":"文本中获取想要的内容添加点击事件","date":"2017-04-06T08:53:32.000Z","path":"2017/04/06/文本中获取想要的内容添加点击事件/","text":"文本中获取想要的内容并添加点击事件最近项目添加新需求，需要获取文本中的链接，标注并跳转webView,就撸了个简单的demo，随后再修改，是用swift写的。github demo ##1、把工具类倒入项目添加需要的代码把 ZQYTapLabbel.swift ZQYExtension.swift WPAttributedStyleAction.swift这三个类倒入项目，创建ZQYTapLabbel即可如下： override func viewDidLoad() { super.viewDidLoad() self.title = &quot;根视图&quot; //创建ZQYTapLabbel这个lable标记需要到内容并添加了点击事件 let label = ZQYTapLabbel(frame: CGRect(x: 50,y: 100,width: 300,height: 100)); label.numberOfLines = 0; let string:NSString = &quot;www.baidu.com你猜这是啥，132343243.45t5t5猜对有奖啊，https://www.github.com&quot;; label.text = string as String; label.attributedText = label.text?.attributedWithStyleBook(); self.view.addSubview(label); //接受通知监听 NotificationCenter.default.addObserver(self, selector:#selector(didMsgRecv(notification:)), name: NSNotification.Name(rawValue: &quot;sendInfoToVC&quot;), object: nil) } //处理事件 func didMsgRecv(notification:NSNotification){ let webView = ZQYWebViewController() webView.url = notification.object as? String self.navigationController?.pushViewController(webView, animated: true) } ##2、在ZQYExtension.swift类中修改，添加自己需要的需求只需要修改String扩展中attributedWithStyleBook函数,代码加注释如下： func attributedWithStyleBook() -&gt; NSAttributedString { let mStr = (self as NSString).mutableCopy() let attributeString = NSMutableAttributedString(string:mStr as! String) do { /* * 我这里是用正则匹配连接，可能不太全面，如有好的请告知。 * 若是想标注某个词或者某个字就把下面的正则表达式换成需要标注的内容 * 例如 regulaStr = &quot;你猜这是啥&quot; */ let regulaStr = &quot;((http[s]{0,1}|ftp)://[a-zA-Z0-9\\\\.\\\\-]+\\\\.([a-zA-Z]{2,4})(:\\\\d+)?(/[a-zA-Z0-9\\\\.\\\\-~!@#$%^&amp;*+?:_/=&lt;&gt;]*)?)|(www.[a-zA-Z0-9\\\\.\\\\-]+\\\\.([a-zA-Z]{2,4})(:\\\\d+)?(/[a-zA-Z0-9\\\\.\\\\-~!@#$%^&amp;*+?:_/=&lt;&gt;]*)?)&quot;; let regex = try NSRegularExpression(pattern: regulaStr, options:.caseInsensitive) let arrayOfAllMatches = regex.matches(in: self, options: NSRegularExpression.MatchingOptions(rawValue: 0), range: NSRange(location:0,length:(self as NSString).length)) arrayOfAllMatches.forEach({ (match) in let subStringForMatch = (self as NSString).substring(with: match.range) //在这个字典做自己特殊修改，添加自己想要的属性 let styleDic = [&quot;body&quot;:UIFont(name:&quot;HelveticaNeue&quot;,size:20.0)!, subStringForMatch:WPAttributedStyleAction.styledActionWithAction { /** * 为需要标示的内容绑定了点击事件 * 若是点击的区域是标记包含的区域在这里做处理你可以用自己想要的方式处理，我这里图省事和方便就用KVO，可能性能不太好。 */ NotificationCenter.default.post(name:NSNotification.Name(rawValue: &quot;sendInfoToVC&quot;), object: subStringForMatch, userInfo: nil) }, &quot;link&quot;:UIColor.orange ] as [String : Any] let bodyStyle = styleDic[&quot;body&quot;] if let bodyStyle = bodyStyle as? NSObject{ self.styleAttributedString(attributeString: attributeString, range: NSRange(location: 0, length: attributeString.length), style: bodyStyle, styleBook: styleDic as NSDictionary) } if let style = styleDic[subStringForMatch] as? NSObject{ self.styleAttributedString(attributeString: attributeString, range: match.range, style: style, styleBook: styleDic as NSDictionary) } }) } catch { } return attributeString; }","tags":[]},{"title":"","date":"2017-03-16T11:44:29.000Z","path":"2017/03/16/个人博客之初搭建/","text":"个人博客之初搭建最近买了个域名，利用GitHub，搭建个人博客。 一、GitHub设置创建仓库 1注意：仓库的名称，必须是：你的用户名.github.io 二、关联GitHub这里有介绍了两种方式，一种是自己用html页面，这就需要扎实的html功底，另一种一个快速、简洁且高效的博客框架Hexo，它使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本人才疏学浅就用了第二种。 （一）、html1、把仓库clone到本地更新内容命令行进入硬盘上任意一个文件夹，然后执行 git clone https://github.com/你的用户名/你的用户名.github.io.git 2、创建CNAME文件进入刚才clone到本地的XXXXX.github.io文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如xxxx.com，注意前面没有http://，也没有www。 （为了看到效果我这里随便写了个html文件） 3、上传到github把文件夹下的文件提交到git git add .git commit -m “更新index.html”git push 提交到github成功后就可以在浏览器查看网址：http://你的用户名.github.io （二）、Hexo1、安装Hexo安装Hexo要首先安装Node.js和Git，安装好之后，就可以用npm来安装Hexo。1$ npm install -g hexo-cli 2、Hexo部署Hexo安装好之后，开始部署。打开终端，进入到你想存放关于Hexo文件的文件夹，执行一下命令123$ hexo init yourName //yourName就是存放文件的文件夹，这句话会帮你创建文件夹$ cd yourName$ npm install 下面就需要修改配置信息与Github pages进行关联，进入yourName文件夹，打开_config.yml文件，并滚动到最下面添加如下配置信息123type: gitrepository: https://github.com/zqyxuwupiaomiao/zqyxuwupiaomiao.github.io.gitbranch: master 注意：这里每个冒号下面一定要有一个空格，不然会出错。到此你使用终端，然后进入到你的站点文件夹使用hexo s命令，如果成功会打印类似Hexo is running at http://localhost:4000/. Press Ctrl+C to stop的一句话，再打开你的浏览器输入localhost:4000地址就可以看到效果。 2、部署到GitHub下面还需要在你的hexo目录里的source目录下添加一个CNAME文件，不带后缀，一定要是大写的CNAME，用文本编辑器打开CNAME，里面添加你的域名信息（不加http://） 如下图 本地跑起来后就需要部署到GitHub pages，所以你就需要在你的站点里使用终端命令进行部署123$ hexo clean$ hexo g$ hexo d 命令详解，第一条是清楚缓存，第二条命令是生成本地发布文件夹，第三条命令才是最后的发布到GitHub pages上。更多的Hexo命令操作请参考官方文档即可。 2、Hexo主题更多个性主题点这里 三、域名解析 （1）先添加一个CNAME记录类型，主机记录写@，后面记录值写上你的http://xxxx.github.io（2）再添加一个CNAME记录类型，主机记录写www，后面记录值也是http://xxxx.github.io这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。 这里用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的IP地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。 A记录是直接解析到空间IP地址；CNAME是解析到别名；MX是电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器，是设置企业邮箱的;NS是指DNS,用默认的就行,一般不用修改；TXT一般指为某个主机名或域名设置的说明，是企业邮箱的辅助设置。 （3）等十分钟左右，用你自己域名访问下试试","tags":[]}]